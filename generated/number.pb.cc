// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: number.proto

#include "number.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NumberRequest::NumberRequest(
    ::_pbi::ConstantInitialized) {}
struct NumberRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberRequestDefaultTypeInternal() {}
  union {
    NumberRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberRequestDefaultTypeInternal _NumberRequest_default_instance_;
PROTOBUF_CONSTEXPR NumberResponse::NumberResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NumberResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberResponseDefaultTypeInternal() {}
  union {
    NumberResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberResponseDefaultTypeInternal _NumberResponse_default_instance_;
PROTOBUF_CONSTEXPR RangeRequest::RangeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_)*/uint64_t{0u}
  , /*decltype(_impl_.max_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeRequestDefaultTypeInternal() {}
  union {
    RangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeRequestDefaultTypeInternal _RangeRequest_default_instance_;
PROTOBUF_CONSTEXPR RangeResponse::RangeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeResponseDefaultTypeInternal() {}
  union {
    RangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeResponseDefaultTypeInternal _RangeResponse_default_instance_;
PROTOBUF_CONSTEXPR SumRequest::SumRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SumRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SumRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SumRequestDefaultTypeInternal() {}
  union {
    SumRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SumRequestDefaultTypeInternal _SumRequest_default_instance_;
PROTOBUF_CONSTEXPR SumResponse::SumResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SumResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SumResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SumResponseDefaultTypeInternal() {}
  union {
    SumResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SumResponseDefaultTypeInternal _SumResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_number_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_number_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_number_2eproto = nullptr;

const uint32_t TableStruct_number_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NumberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NumberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NumberResponse, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RangeRequest, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::RangeRequest, _impl_.max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RangeResponse, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SumRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SumRequest, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SumResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SumResponse, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::NumberRequest)},
  { 6, -1, -1, sizeof(::NumberResponse)},
  { 13, -1, -1, sizeof(::RangeRequest)},
  { 21, -1, -1, sizeof(::RangeResponse)},
  { 28, -1, -1, sizeof(::SumRequest)},
  { 35, -1, -1, sizeof(::SumResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_NumberRequest_default_instance_._instance,
  &::_NumberResponse_default_instance_._instance,
  &::_RangeRequest_default_instance_._instance,
  &::_RangeResponse_default_instance_._instance,
  &::_SumRequest_default_instance_._instance,
  &::_SumResponse_default_instance_._instance,
};

const char descriptor_table_protodef_number_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014number.proto\"\017\n\rNumberRequest\"\037\n\016Numbe"
  "rResponse\022\r\n\005value\030\001 \001(\004\"(\n\014RangeRequest"
  "\022\013\n\003min\030\001 \001(\004\022\013\n\003max\030\002 \001(\004\"\036\n\rRangeRespo"
  "nse\022\r\n\005value\030\001 \001(\004\"\033\n\nSumRequest\022\r\n\005valu"
  "e\030\001 \001(\004\"\034\n\013SumResponse\022\r\n\005value\030\001 \001(\0042\206\001"
  "\n\rNumberService\022\'\n\004Next\022\016.NumberRequest\032"
  "\017.NumberResponse\022(\n\005Range\022\r.RangeRequest"
  "\032\016.RangeResponse0\001\022\"\n\003SUm\022\013.SumRequest\032\014"
  ".SumResponse(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_number_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_number_2eproto = {
    false, false, 342, descriptor_table_protodef_number_2eproto,
    "number.proto",
    &descriptor_table_number_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_number_2eproto::offsets,
    file_level_metadata_number_2eproto, file_level_enum_descriptors_number_2eproto,
    file_level_service_descriptors_number_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_number_2eproto_getter() {
  return &descriptor_table_number_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_number_2eproto(&descriptor_table_number_2eproto);

// ===================================================================

class NumberRequest::_Internal {
 public:
};

NumberRequest::NumberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:NumberRequest)
}
NumberRequest::NumberRequest(const NumberRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NumberRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NumberRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NumberRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_number_2eproto_getter, &descriptor_table_number_2eproto_once,
      file_level_metadata_number_2eproto[0]);
}

// ===================================================================

class NumberResponse::_Internal {
 public:
};

NumberResponse::NumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NumberResponse)
}
NumberResponse::NumberResponse(const NumberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumberResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:NumberResponse)
}

inline void NumberResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NumberResponse::~NumberResponse() {
  // @@protoc_insertion_point(destructor:NumberResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NumberResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NumberResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumberResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NumberResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NumberResponse)
  return target;
}

size_t NumberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NumberResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumberResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberResponse::GetClassData() const { return &_class_data_; }


void NumberResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumberResponse*>(&to_msg);
  auto& from = static_cast<const NumberResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NumberResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberResponse::CopyFrom(const NumberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NumberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberResponse::IsInitialized() const {
  return true;
}

void NumberResponse::InternalSwap(NumberResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_number_2eproto_getter, &descriptor_table_number_2eproto_once,
      file_level_metadata_number_2eproto[1]);
}

// ===================================================================

class RangeRequest::_Internal {
 public:
};

RangeRequest::RangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RangeRequest)
}
RangeRequest::RangeRequest(const RangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){}
    , decltype(_impl_.max_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_, &from._impl_.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_) -
    reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.max_));
  // @@protoc_insertion_point(copy_constructor:RangeRequest)
}

inline void RangeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){uint64_t{0u}}
    , decltype(_impl_.max_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RangeRequest::~RangeRequest() {
  // @@protoc_insertion_point(destructor:RangeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RangeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_) -
      reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min = 1;
  if (this->_internal_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_min(), target);
  }

  // uint64 max = 2;
  if (this->_internal_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RangeRequest)
  return target;
}

size_t RangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 min = 1;
  if (this->_internal_min() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_min());
  }

  // uint64 max = 2;
  if (this->_internal_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeRequest::GetClassData() const { return &_class_data_; }


void RangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeRequest*>(&to_msg);
  auto& from = static_cast<const RangeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RangeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_min() != 0) {
    _this->_internal_set_min(from._internal_min());
  }
  if (from._internal_max() != 0) {
    _this->_internal_set_max(from._internal_max());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeRequest::CopyFrom(const RangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeRequest::IsInitialized() const {
  return true;
}

void RangeRequest::InternalSwap(RangeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeRequest, _impl_.max_)
      + sizeof(RangeRequest::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(RangeRequest, _impl_.min_)>(
          reinterpret_cast<char*>(&_impl_.min_),
          reinterpret_cast<char*>(&other->_impl_.min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_number_2eproto_getter, &descriptor_table_number_2eproto_once,
      file_level_metadata_number_2eproto[2]);
}

// ===================================================================

class RangeResponse::_Internal {
 public:
};

RangeResponse::RangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RangeResponse)
}
RangeResponse::RangeResponse(const RangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:RangeResponse)
}

inline void RangeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RangeResponse::~RangeResponse() {
  // @@protoc_insertion_point(destructor:RangeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RangeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RangeResponse)
  return target;
}

size_t RangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeResponse::GetClassData() const { return &_class_data_; }


void RangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeResponse*>(&to_msg);
  auto& from = static_cast<const RangeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RangeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeResponse::CopyFrom(const RangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeResponse::IsInitialized() const {
  return true;
}

void RangeResponse::InternalSwap(RangeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_number_2eproto_getter, &descriptor_table_number_2eproto_once,
      file_level_metadata_number_2eproto[3]);
}

// ===================================================================

class SumRequest::_Internal {
 public:
};

SumRequest::SumRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SumRequest)
}
SumRequest::SumRequest(const SumRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SumRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:SumRequest)
}

inline void SumRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SumRequest::~SumRequest() {
  // @@protoc_insertion_point(destructor:SumRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SumRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SumRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SumRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SumRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SumRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SumRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SumRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SumRequest)
  return target;
}

size_t SumRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SumRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SumRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SumRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SumRequest::GetClassData() const { return &_class_data_; }


void SumRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SumRequest*>(&to_msg);
  auto& from = static_cast<const SumRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SumRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SumRequest::CopyFrom(const SumRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumRequest::IsInitialized() const {
  return true;
}

void SumRequest::InternalSwap(SumRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SumRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_number_2eproto_getter, &descriptor_table_number_2eproto_once,
      file_level_metadata_number_2eproto[4]);
}

// ===================================================================

class SumResponse::_Internal {
 public:
};

SumResponse::SumResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SumResponse)
}
SumResponse::SumResponse(const SumResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SumResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:SumResponse)
}

inline void SumResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SumResponse::~SumResponse() {
  // @@protoc_insertion_point(destructor:SumResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SumResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SumResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SumResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SumResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SumResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SumResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SumResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SumResponse)
  return target;
}

size_t SumResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SumResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SumResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SumResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SumResponse::GetClassData() const { return &_class_data_; }


void SumResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SumResponse*>(&to_msg);
  auto& from = static_cast<const SumResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SumResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SumResponse::CopyFrom(const SumResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SumResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumResponse::IsInitialized() const {
  return true;
}

void SumResponse::InternalSwap(SumResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SumResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_number_2eproto_getter, &descriptor_table_number_2eproto_once,
      file_level_metadata_number_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NumberRequest*
Arena::CreateMaybeMessage< ::NumberRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NumberRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NumberResponse*
Arena::CreateMaybeMessage< ::NumberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NumberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RangeRequest*
Arena::CreateMaybeMessage< ::RangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RangeResponse*
Arena::CreateMaybeMessage< ::RangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SumRequest*
Arena::CreateMaybeMessage< ::SumRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SumRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SumResponse*
Arena::CreateMaybeMessage< ::SumResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SumResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
